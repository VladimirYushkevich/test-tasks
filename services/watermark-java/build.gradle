buildscript {
    ext {
        springBootVersion = '1.5.2.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'jacoco'
apply plugin: 'io.spring.dependency-management'

jar {
    archiveBaseName = 'watermark'
    archiveVersion = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

springBoot {
    mainClass = "com.yushkevich.watermark.Application"
}

dependencies {
    //Spring Boot
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    //Async
    compile('com.netflix.hystrix:hystrix-core:1.5.9')
    //API
    compile('io.springfox:springfox-swagger2:2.6.1')
    compile('io.springfox:springfox-swagger-ui:2.6.1')
    //DB
    compile('com.h2database:h2')
    //Utils
    compileOnly("org.projectlombok:lombok")
    testCompileOnly("org.projectlombok:lombok")
    integrationTestCompileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")
    testAnnotationProcessor("org.projectlombok:lombok")
    integrationTestAnnotationProcessor("org.projectlombok:lombok")
    compile('com.google.guava:guava:21.0')
    //Test
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('com.jayway.restassured:rest-assured:2.9.0')
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

task jacocoIntegrationTestReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/integrationTest.exec")
    sourceSets sourceSets.main
    reports {
        xml.enabled true
        html.enabled true
    }
}

task jacocoIntegrationTestCoverageVerification(type: JacocoCoverageVerification) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/integrationTest.exec")
    sourceSets sourceSets.main
    violationRules {
        rule {
            limit {
                minimum = 0.57
            }
        }
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.30
            }
        }
    }
}

integrationTest.mustRunAfter jacocoTestCoverageVerification
integrationTest.finalizedBy jacocoIntegrationTestReport
jacocoIntegrationTestReport.finalizedBy jacocoIntegrationTestCoverageVerification
